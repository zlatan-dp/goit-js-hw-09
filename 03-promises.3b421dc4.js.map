{"mappings":"gfAEA,IAAAA,EAAAC,EAAA,SAuCA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAAKC,GACvB,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EAEFF,EAAI,CAAEH,WAAUC,UAGhBG,EAAI,CAAEJ,WAAUC,YAEjBA,MAhDMQ,SAASC,cAAc,SAM/BC,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAIC,iBAWJ,IAVA,IAEqBC,EAAjBF,EAAIG,cADNC,SAAYC,EAAKH,EAALb,MAAOiB,EAAIJ,EAAJI,KAAMC,EAAML,EAANK,OAErBC,EAAaC,SAASJ,EAAMK,OAC5BC,EAAYF,SAASH,EAAKI,OAC1BE,EAAYH,SAASF,EAAOG,OAKzBG,EAAI,EAAGA,GAAKD,EAAWC,GAAK,EAAG,CAGtC1B,EAAc0B,EAFOL,EAAaG,GAAaE,EAAI,IAGhDC,MAAK,SAAAC,G,IAAG3B,EAAQ2B,EAAR3B,SAAUC,EAAK0B,EAAL1B,MAEjBJ,EAAA+B,OAAOC,QAAQ,uBAAwCC,OAAf9B,EAAS,QAAY8B,OAAN7B,EAAM,UAE9D8B,OAAM,SAAAJ,G,IAAG3B,EAAQ2B,EAAR3B,SAAUC,EAAK0B,EAAL1B,MAElBJ,EAAA+B,OAAOI,QAAQ,sBAAqCF,OAAf9B,EAAS,QAAY8B,OAAN7B,EAAM,UAIhEW,EAAIG,cAAckB,W","sources":["src/js/03-promises.js"],"sourcesContent":["//console.log('what are f#ck!!!!');\n\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\n\n// let firstDelay = 0;\n// let delayStep = 0;\n// let numAmount = 0;\n\nform.addEventListener('submit', onSubmitForm);\n\nfunction onSubmitForm(evt) {\n  evt.preventDefault();\n  const {\n    elements: { delay, step, amount },\n  } = evt.currentTarget;\n  const firstDelay = parseInt(delay.value);\n  const delayStep = parseInt(step.value);\n  const numAmount = parseInt(amount.value);\n  //console.log(firstDelay, delayStep, numAmount);\n\n  //let delayPromise = firstDelay;\n\n  for (let i = 1; i <= numAmount; i += 1) {\n    const delayPromise = firstDelay + delayStep * (i - 1);\n    //console.log(delayPromise);\n    createPromise(i, delayPromise)\n      .then(({ position, delay }) => {\n        //console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        //console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n\n  evt.currentTarget.reset();\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((res, rej) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        res({ position, delay });\n      } else {\n        // Reject\n        rej({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","res","rej","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","evt","preventDefault","_elements","currentTarget","elements","delay1","step","amount","firstDelay","parseInt","value","delayStep","numAmount","i","then","param","Notify","success","concat","catch","failure","reset"],"version":3,"file":"03-promises.3b421dc4.js.map"}